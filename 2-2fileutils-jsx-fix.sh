#!/bin/bash

echo "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSX —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ fileUtils.js"

cd frontend/src/utils

# ============================================================================
# –ò–°–ü–†–ê–í–ò–¢–¨ fileUtils.js - –ü–†–ê–í–ò–õ–¨–ù–´–ô JSX –†–ï–ù–î–ï–†–ò–ù–ì
# ============================================================================

cat > fileUtils.js << 'EOF'
import React from 'react'
import { 
  FileText, 
  Code, 
  Image, 
  FileJson, 
  FileCode2, 
  Palette,
  File as FileIcon
} from 'lucide-react'

export const getFileIcon = (fileName) => {
  const ext = fileName.split('.').pop()?.toLowerCase()
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞, –∞ –Ω–µ JSX –æ–±—ä–µ–∫—Ç
  const getIcon = () => {
    switch(ext) {
      // Code files
      case 'js':
        return <Code size={16} className="text-yellow-400" />
      case 'jsx':
        return <Code size={16} className="text-blue-400" />
      case 'ts':
        return <FileCode2 size={16} className="text-blue-500" />
      case 'tsx':
        return <FileCode2 size={16} className="text-blue-500" />
      case 'py':
        return <Code size={16} className="text-green-400" />
      
      // Web files
      case 'html':
        return <Code size={16} className="text-orange-400" />
      case 'css':
        return <Palette size={16} className="text-blue-300" />
      case 'scss':
        return <Palette size={16} className="text-pink-400" />
      
      // Data files
      case 'json':
        return <FileJson size={16} className="text-yellow-300" />
      case 'md':
        return <FileText size={16} className="text-gray-300" />
      case 'txt':
        return <FileText size={16} className="text-gray-400" />
      
      // Images
      case 'png':
      case 'jpg':
      case 'jpeg':
      case 'gif':
        return <Image size={16} className="text-green-400" />
      case 'svg':
        return <Image size={16} className="text-purple-400" />
      
      // Default
      default:
        return <FileIcon size={16} className="text-gray-400" />
    }
  }
  
  return getIcon()
}

export const getLanguageFromExtension = (fileName) => {
  const ext = fileName.split('.').pop()?.toLowerCase()
  
  const languageMap = {
    js: 'javascript',
    jsx: 'javascript', 
    ts: 'typescript',
    tsx: 'typescript',
    py: 'python',
    html: 'html',
    css: 'css',
    scss: 'scss',
    json: 'json',
    md: 'markdown',
    txt: 'text'
  }
  
  return languageMap[ext] || 'text'
}

export const isImageFile = (fileName) => {
  const ext = fileName.split('.').pop()?.toLowerCase()
  return ['png', 'jpg', 'jpeg', 'gif', 'svg', 'webp', 'bmp'].includes(ext)
}

export const isExecutableFile = (fileName) => {
  const ext = fileName.split('.').pop()?.toLowerCase()
  return ['html', 'js', 'jsx'].includes(ext)
}
EOF

echo "‚úÖ fileUtils.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"

# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
# ============================================================================

cd ../../..
npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ JSX –†–ï–ù–î–ï–†–ò–ù–ì –ò–°–ü–†–ê–í–õ–ï–ù!"
    echo ""
    echo "–¢–ï–ü–ï–†–¨ –ò–ö–û–ù–ö–ò –§–ê–ô–õ–û–í –î–û–õ–ñ–ù–´ –û–¢–û–ë–†–ê–ñ–ê–¢–¨–°–Ø –ö–û–†–†–ï–ö–¢–ù–û:"
    echo "- .js —Ñ–∞–π–ª—ã: –∂–µ–ª—Ç–∞—è –∏–∫–æ–Ω–∫–∞ Code"
    echo "- .jsx —Ñ–∞–π–ª—ã: —Å–∏–Ω—è—è –∏–∫–æ–Ω–∫–∞ Code" 
    echo "- .css —Ñ–∞–π–ª—ã: —Å–∏–Ω—è—è –∏–∫–æ–Ω–∫–∞ Palette"
    echo "- .json —Ñ–∞–π–ª—ã: –∂–µ–ª—Ç–∞—è –∏–∫–æ–Ω–∫–∞ FileJson"
    echo "- .md —Ñ–∞–π–ª—ã: —Å–µ—Ä–∞—è –∏–∫–æ–Ω–∫–∞ FileText"
    echo "- –¥—Ä—É–≥–∏–µ: —Å–µ—Ä–∞—è –∏–∫–æ–Ω–∫–∞ File"
    
    echo ""
    echo "üîß –ö–û–ú–ú–ò–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô:"
    echo "git add ."
    echo "git commit -m 'Fix JSX rendering in fileUtils for proper file icons'"
    echo "git push origin main"
    
else
    echo "‚ùå Build failed - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏"
    exit 1
fi