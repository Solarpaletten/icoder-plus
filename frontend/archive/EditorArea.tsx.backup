import React from 'react';
import { X, Plus } from 'lucide-react';
import { MonacoEditor } from '../MonacoEditor';
import type { TabItem } from '../../types';

interface EditorAreaProps {
  tabs: TabItem[];
  activeTabId: string | null;
  onTabClose: (id: string) => void;
  onTabSelect: (id: string) => void;
  onContentChange: (id: string, content: string) => void;
}

export const EditorArea: React.FC<EditorAreaProps> = ({
  tabs,
  activeTabId,
  onTabClose,
  onTabSelect,
  onContentChange
}) => {
  const activeTab = tabs.find(tab => tab.id === activeTabId);

  return (
    <div className="flex flex-col h-full bg-gray-900">
      {/* Tab Bar */}
      <div className="flex bg-gray-800 border-b border-gray-700 min-h-[40px]">
        <div className="flex flex-1 overflow-x-auto">
          {tabs.map((tab) => (
            <div
              key={tab.id}
              className={`group flex items-center px-3 py-2 border-r border-gray-700 cursor-pointer min-w-0 max-w-[200px]
                ${tab.id === activeTabId 
                  ? 'bg-gray-900 text-white border-t-2 border-t-blue-500' 
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                }`}
              onClick={() => onTabSelect(tab.id)}
            >
              {/* File Icon */}
              <div className="mr-2 flex-shrink-0">
                <div className="w-4 h-4 bg-blue-500 rounded-sm flex items-center justify-center text-xs text-white">
                  {tab.name.split('.').pop()?.charAt(0)?.toUpperCase() || 'F'}
                </div>
              </div>
              
              {/* File Name */}
              <span className="truncate text-sm mr-2">{tab.name}</span>
              
              {/* Modified Indicator */}
              {tab.modified && (
                <div className="w-2 h-2 bg-white rounded-full mr-1 flex-shrink-0" />
              )}
              
              {/* Close Button */}
              <button
                className="ml-auto opacity-0 group-hover:opacity-100 hover:bg-gray-600 rounded p-0.5 flex-shrink-0"
                onClick={(e) => {
                  e.stopPropagation();
                  onTabClose(tab.id);
                }}
                aria-label="Close tab"
              >
                <X size={14} />
              </button>
            </div>
          ))}
        </div>
        
        {/* New Tab Button */}
        <button
          className="px-3 py-2 text-gray-400 hover:text-white hover:bg-gray-700"
          aria-label="New tab"
        >
          <Plus size={16} />
        </button>
      </div>

      {/* Editor Content */}
      <div className="flex-1 relative">
        {activeTab ? (
          <MonacoEditor
            filename={activeTab.name}
            content={activeTab.content || ''}
            onChange={(content) => onContentChange(activeTab.id, content)}
          />
        ) : (
          <div className="flex items-center justify-center h-full text-gray-400">
            <div className="text-center">
              <div className="text-6xl mb-4">üìù</div>
              <h2 className="text-xl mb-2">Welcome to iCoder Plus</h2>
              <p className="text-gray-500">Open a file to start editing</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
