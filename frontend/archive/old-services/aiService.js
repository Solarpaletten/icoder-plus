// –ò—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env, –∞ –Ω–µ process.env
const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:3008'

// ==============================
// AI CHAT ENDPOINT
// ==============================
export const askAI = async ({ agent, message, code, fileName, context }) => {
  try {
    const response = await fetch(`${API_BASE}/api/ai/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        agent,
        message,
        code,
        fileName,
        context
      }),
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    return data.data || data
  } catch (error) {
    console.error('AI Service Error:', error)

    // Fallback –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const fallbackResponses = {
      dashka: `üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑** (Fallback mode)\n\n${
        message.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä')
          ? '–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.'
          : '–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.'
      }`,
      claudy: `ü§ñ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞** (Fallback mode)\n\n\`\`\`javascript
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è: ${message}
const component = () => {
  return <div>Hello from Claudy!</div>
}

export default component
\`\`\``
    }

    return { message: fallbackResponses[agent] || 'AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.' }
  }
}

// ==============================
// AI ANALYZE ENDPOINT
// ==============================
export const analyzeCode = async (code, fileName) => {
  try {
    const response = await fetch(`${API_BASE}/api/ai/analyze`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ code, fileName }),
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('Code Analysis Error:', error)
    return {
      suggestions: ['AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'],
      issues: [],
      score: 85
    }
  }
}

// ==============================
// AI GENERATE ENDPOINT
// ==============================
export const generateCode = async (prompt, context) => {
  try {
    const response = await fetch(`${API_BASE}/api/ai/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt, context }),
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const data = await response.json()
    return data
  } catch (error) {
    console.error('Code Generation Error:', error)
    return {
      code: '// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
      explanation: 'AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    }
  }
}
