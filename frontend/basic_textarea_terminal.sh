#!/bin/bash

echo "üîß –ë–ê–ó–û–í–´–ô TEXTAREA –¢–ï–†–ú–ò–ù–ê–õ"
echo "============================"
echo "–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª –±–µ–∑ XTerm"

# –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–∞ textarea
cat > src/components/BasicTerminal.tsx << 'EOF'
import { useEffect, useRef, useState } from 'react';

interface BasicTerminalProps {
  isVisible: boolean;
  height: number;
}

export function BasicTerminal({ isVisible, height }: BasicTerminalProps) {
  const [output, setOutput] = useState('Connecting to terminal...\n');
  const [input, setInput] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const wsRef = useRef<WebSocket | null>(null);
  const outputRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isVisible) return;

    // –ü—Ä–æ—Å—Ç–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const ws = new WebSocket('ws://localhost:3000/terminal');
    wsRef.current = ws;

    ws.onopen = () => {
      setIsConnected(true);
      setOutput('Connected to bash terminal!\nType commands and press Enter:\n\n');
    };

    ws.onmessage = (event) => {
      setOutput(prev => prev + event.data);
      // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
      setTimeout(() => {
        if (outputRef.current) {
          outputRef.current.scrollTop = outputRef.current.scrollHeight;
        }
      }, 10);
    };

    ws.onclose = () => {
      setIsConnected(false);
      setOutput(prev => prev + '\nConnection closed\n');
    };

    ws.onerror = () => {
      setIsConnected(false);
      setOutput(prev => prev + '\nConnection error\n');
    };

    return () => {
      ws.close();
    };
  }, [isVisible]);

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      if (wsRef.current && isConnected) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        wsRef.current.send(input + '\r');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≤—ã–≤–æ–¥
        setOutput(prev => prev + `$ ${input}\n`);
        setInput('');
      }
    } else if (e.key === 'Backspace') {
      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Backspace
    } else if (e.ctrlKey && e.key === 'c') {
      // Ctrl+C
      e.preventDefault();
      if (wsRef.current && isConnected) {
        wsRef.current.send('\x03'); // Ctrl+C signal
      }
    } else if (e.ctrlKey && e.key === 'l') {
      // Ctrl+L - –æ—á–∏—Å—Ç–∏—Ç—å
      e.preventDefault();
      setOutput('');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  return (
    <div className="h-full flex flex-col bg-black text-green-400 font-mono">
      {/* –°—Ç–∞—Ç—É—Å */}
      <div className="p-2 bg-gray-800 text-white text-sm border-b border-gray-600">
        <span className={`inline-block w-2 h-2 rounded-full mr-2 ${
          isConnected ? 'bg-green-400' : 'bg-red-400'
        }`}></span>
        {isConnected ? 'Connected - Basic Terminal' : 'Disconnected'}
        <span className="ml-4 text-gray-400">
          Ctrl+C: interrupt, Ctrl+L: clear
        </span>
      </div>

      {/* –í—ã–≤–æ–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ */}
      <div 
        ref={outputRef}
        className="flex-1 p-3 overflow-y-auto whitespace-pre-wrap text-sm leading-relaxed"
        style={{ height: `${height - 100}px` }}
      >
        {output}
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <div className="p-3 bg-gray-900 border-t border-gray-600">
        <div className="flex items-center">
          <span className="text-green-400 mr-2">$</span>
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            placeholder={isConnected ? "Type command and press Enter" : "Connecting..."}
            disabled={!isConnected}
            className="flex-1 bg-transparent text-green-400 outline-none placeholder-gray-500"
            autoFocus
          />
        </div>
      </div>
      
      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="p-2 bg-gray-900 border-t border-gray-700 text-xs text-gray-500">
        Try: pwd, ls, whoami, date, cd /tmp, ps aux
      </div>
    </div>
  );
}
EOF

echo "‚úÖ BasicTerminal —Å–æ–∑–¥–∞–Ω"

# –û–±–Ω–æ–≤–∏—Ç—å Terminal.tsx
cat > src/components/Terminal.tsx << 'EOF'
import { BasicTerminal } from './BasicTerminal';

interface TerminalProps {
  isVisible?: boolean;
  height?: number;
}

export function Terminal({ isVisible = true, height = 200 }: TerminalProps) {
  return <BasicTerminal isVisible={isVisible} height={height} />;
}
EOF

echo "‚úÖ Terminal.tsx –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è BasicTerminal"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≥–æ—Ç–æ–≤!"
    echo "üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:"
    echo "   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π input + output"
    echo "   ‚Ä¢ –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞"
    echo "   ‚Ä¢ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã"
    echo "   ‚Ä¢ Ctrl+C –∏ Ctrl+L —Ä–∞–±–æ—Ç–∞—é—Ç"
    echo "   ‚Ä¢ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤—ã–≤–æ–¥–∞"
    echo ""
    echo "üí° –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞!"
else
    echo "‚ùå –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏"
fi