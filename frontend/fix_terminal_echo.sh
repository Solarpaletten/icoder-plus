#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –¢–ï–†–ú–ò–ù–ê–õ–ï"
echo "======================================"
echo "–£–±–∏—Ä–∞–µ–º echo –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ VS Code"

# ============================================================================
# 1. –ò–°–ü–†–ê–í–ò–¢–¨ XTermTerminal.tsx - —É–±—Ä–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —ç—Ö–æ
# ============================================================================

cat > src/components/XTermTerminal.tsx << 'EOF'
import { useEffect, useRef, useState } from 'react';
import { Terminal } from '@xterm/xterm';
import { FitAddon } from '@xterm/addon-fit';
import { WebLinksAddon } from '@xterm/addon-web-links';
import '@xterm/xterm/css/xterm.css';
import { terminalService } from '../services/terminalService';

interface XTermTerminalProps {
  isVisible: boolean;
  height: number;
}

export function XTermTerminal({ isVisible, height }: XTermTerminalProps) {
  const terminalRef = useRef<HTMLDivElement>(null);
  const xtermRef = useRef<Terminal | null>(null);
  const fitAddonRef = useRef<FitAddon | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');

  useEffect(() => {
    if (!terminalRef.current || !isVisible) return;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const terminal = new Terminal({
      cursorBlink: true,
      fontSize: 14,
      fontFamily: '"Cascadia Code", "Fira Code", "SF Mono", Monaco, "Ubuntu Mono", monospace',
      theme: {
        background: '#1e1e1e',
        foreground: '#d4d4d4',
        cursor: '#ffffff',
        black: '#000000',
        red: '#cd3131',
        green: '#0dbc79',
        yellow: '#e5e510',
        blue: '#2472c8',
        magenta: '#bc3fbc',
        cyan: '#11a8cd',
        white: '#e5e5e5',
        brightBlack: '#666666',
        brightRed: '#f14c4c',
        brightGreen: '#23d18b',
        brightYellow: '#f5f543',
        brightBlue: '#3b8eea',
        brightMagenta: '#d670d6',
        brightCyan: '#29b8db',
        brightWhite: '#ffffff'
      },
      scrollback: 10000,
      tabStopWidth: 4,
      allowProposedApi: true,
      // –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —ç—Ö–æ
      disableStdin: false,
      convertEol: true
    });

    // –°–æ–∑–¥–∞–µ–º –∞–¥–¥–æ–Ω—ã
    const fitAddon = new FitAddon();
    const webLinksAddon = new WebLinksAddon();

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–¥–æ–Ω—ã
    terminal.loadAddon(fitAddon);
    terminal.loadAddon(webLinksAddon);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
    terminal.open(terminalRef.current);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
    xtermRef.current = terminal;
    fitAddonRef.current = fitAddon;

    // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    fitAddon.fit();

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    terminal.writeln('\x1b[1;36miCoder Plus Terminal v2.0 - Real bash connection\x1b[0m');
    terminal.writeln('\x1b[32mConnecting to backend...\x1b[0m');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ - –ë–ï–ó –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç—Ö–æ
    terminal.onData((data) => {
      if (terminalService.getConnectionStatus()) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        terminalService.sendInput(data);
      }
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É
    connectTerminal();

    return () => {
      terminal.dispose();
      xtermRef.current = null;
      fitAddonRef.current = null;
    };
  }, [isVisible]);

  const connectTerminal = async () => {
    setConnectionStatus('connecting');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    terminalService.on('connect', () => {
      setConnectionStatus('connected');
      if (xtermRef.current) {
        xtermRef.current.clear();
        xtermRef.current.writeln('\x1b[32m‚úÖ Connected to real bash terminal\x1b[0m');
        xtermRef.current.writeln('');
      }
    });

    terminalService.on('disconnect', () => {
      setConnectionStatus('disconnected');
      if (xtermRef.current) {
        xtermRef.current.writeln('\r\n\x1b[31m‚ùå Terminal disconnected\x1b[0m');
      }
    });

    terminalService.on('error', (message: string) => {
      setConnectionStatus('error');
      if (xtermRef.current) {
        xtermRef.current.writeln(`\r\n\x1b[31m‚ùå Error: ${message}\x1b[0m`);
        xtermRef.current.writeln('\x1b[33müí° Falling back to demo mode...\x1b[0m');
        startDemoMode();
      }
    });

    terminalService.on('data', (data: string) => {
      if (xtermRef.current) {
        // –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        xtermRef.current.write(data);
      }
    });

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connected = await terminalService.connect();
    if (!connected) {
      setConnectionStatus('error');
    }
  };

  const startDemoMode = () => {
    if (!xtermRef.current) return;

    const terminal = xtermRef.current;
    let currentLine = '';

    terminal.writeln('');
    terminal.writeln('\x1b[36müìã Demo Mode - Type commands:\x1b[0m');
    terminal.writeln('  help, ls, pwd, whoami, date, clear, status');
    terminal.write('\r\n$ ');

    // –î–µ–º–æ-—Ä–µ–∂–∏–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç—Ö–æ
    const handleDemoData = (data: string) => {
      if (data === '\r') { // Enter
        terminal.write('\r\n');
        executeDemoCommand(currentLine.trim());
        currentLine = '';
        terminal.write('$ ');
      } else if (data === '\u007f') { // Backspace
        if (currentLine.length > 0) {
          currentLine = currentLine.slice(0, -1);
          terminal.write('\b \b');
        }
      } else if (data >= ' ' && data <= '~') { // Printable characters
        currentLine += data;
        terminal.write(data); // –≠—Ö–æ —Ç–æ–ª—å–∫–æ –≤ demo —Ä–µ–∂–∏–º–µ
      }
    };

    terminal.onData(handleDemoData);
  };

  const executeDemoCommand = (command: string) => {
    if (!xtermRef.current) return;

    const terminal = xtermRef.current;

    switch (command.toLowerCase()) {
      case 'help':
        terminal.writeln('Demo mode commands:');
        terminal.writeln('  help, ls, pwd, whoami, date, clear, status');
        break;
      case 'ls':
        terminal.writeln('frontend/  backend/  package.json  README.md');
        break;
      case 'pwd':
        terminal.writeln('/workspace/icoder-plus');
        break;
      case 'whoami':
        terminal.writeln('developer');
        break;
      case 'date':
        terminal.writeln(new Date().toString());
        break;
      case 'status':
        terminal.writeln('Frontend: Running, Backend: Demo Mode');
        break;
      case 'clear':
        terminal.clear();
        terminal.writeln('Demo Mode - Type "help" for commands');
        break;
      case '':
        break;
      default:
        terminal.writeln(`bash: ${command}: command not found`);
    }
  };

  // –ü–æ–¥–≥–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã
  useEffect(() => {
    if (fitAddonRef.current && isVisible) {
      const timer = setTimeout(() => {
        fitAddonRef.current?.fit();
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [height, isVisible]);

  // –§–æ–∫—É—Å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
  useEffect(() => {
    if (isVisible && xtermRef.current) {
      xtermRef.current.focus();
    }
  }, [isVisible]);

  return (
    <div className="h-full flex flex-col bg-gray-900">
      {/* Connection Status */}
      <div className="flex items-center justify-between px-3 py-1 bg-gray-800 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${
            connectionStatus === 'connected' ? 'bg-green-400' :
            connectionStatus === 'connecting' ? 'bg-yellow-400 animate-pulse' :
            connectionStatus === 'error' ? 'bg-orange-400' :
            'bg-red-400'
          }`} />
          <span className="text-xs text-gray-400">
            {connectionStatus === 'connected' ? 'Backend Connected' :
             connectionStatus === 'connecting' ? 'Connecting...' :
             connectionStatus === 'error' ? 'Demo Mode' :
             'Disconnected'}
          </span>
        </div>
        
        {connectionStatus === 'error' && (
          <button
            onClick={connectTerminal}
            className="text-xs text-blue-400 hover:text-blue-300"
          >
            Retry
          </button>
        )}
      </div>

      {/* XTerm Container */}
      <div 
        ref={terminalRef} 
        className="flex-1 p-2 overflow-hidden"
        style={{ height: `${height - 40}px` }}
      />
    </div>
  );
}
EOF

echo "‚úÖ XTermTerminal.tsx –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"

# ============================================================================
# 2. –û–ë–ù–û–í–ò–¢–¨ terminalService.ts - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
# ============================================================================

cat > src/services/terminalService.ts << 'EOF'
interface TerminalMessage {
  type: 'command' | 'output' | 'error' | 'connect' | 'disconnect';
  data: string;
  timestamp?: number;
}

class TerminalService {
  private ws: WebSocket | null = null;
  private callbacks: Map<string, Function[]> = new Map();
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 3;

  constructor() {
    this.initializeCallbacks();
  }

  private initializeCallbacks() {
    this.callbacks.set('data', []);
    this.callbacks.set('connect', []);
    this.callbacks.set('disconnect', []);
    this.callbacks.set('error', []);
  }

  async connect(): Promise<boolean> {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç 3000
      const wsUrl = process.env.NODE_ENV === 'production' 
        ? 'wss://api.icoder.swapoil.de/terminal'
        : 'ws://localhost:3000/terminal';

      console.log('Connecting to:', wsUrl);
      this.ws = new WebSocket(wsUrl);

      this.ws.onopen = () => {
        this.isConnected = true;
        this.reconnectAttempts = 0;
        this.emit('connect', 'Connected to terminal server');
        console.log('Terminal WebSocket connected to', wsUrl);
      };

      this.ws.onmessage = (event) => {
        // –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        this.emit('data', event.data);
      };

      this.ws.onclose = (event) => {
        this.isConnected = false;
        console.log('Terminal WebSocket closed:', event.code, event.reason);
        this.emit('disconnect', 'Terminal connection closed');
        
        if (event.code !== 1000) { // –ù–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
          this.handleReconnect();
        }
      };

      this.ws.onerror = (error) => {
        console.error('Terminal WebSocket error:', error);
        this.emit('error', 'Connection error');
      };

      return true;
    } catch (error) {
      console.error('Failed to connect to terminal:', error);
      this.emit('error', 'Failed to connect to terminal server');
      return false;
    }
  }

  private handleReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = 1000 * this.reconnectAttempts;
      
      console.log(`Reconnecting in ${delay}ms... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
      
      setTimeout(() => {
        this.connect();
      }, delay);
    } else {
      this.emit('error', 'Max reconnection attempts reached');
    }
  }

  sendInput(input: string) {
    if (this.ws && this.isConnected) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º raw –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ JSON –æ–±–µ—Ä—Ç–∫–∏
      this.ws.send(input);
    } else {
      console.warn('Terminal not connected, cannot send:', input);
    }
  }

  on(event: string, callback: Function) {
    if (!this.callbacks.has(event)) {
      this.callbacks.set(event, []);
    }
    this.callbacks.get(event)?.push(callback);
  }

  off(event: string, callback: Function) {
    const callbacks = this.callbacks.get(event);
    if (callbacks) {
      const index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    }
  }

  private emit(event: string, data: any) {
    const callbacks = this.callbacks.get(event);
    if (callbacks) {
      callbacks.forEach(callback => callback(data));
    }
  }

  disconnect() {
    if (this.ws) {
      this.ws.close(1000, 'User disconnect');
      this.ws = null;
    }
    this.isConnected = false;
  }

  getConnectionStatus(): boolean {
    return this.isConnected;
  }
}

export const terminalService = new TerminalService();
EOF

echo "‚úÖ Terminal Service –æ–±–Ω–æ–≤–ª–µ–Ω - –ø–æ—Ä—Ç 3000"

# ============================================================================
# 3. –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
# ============================================================================

echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!"
    echo "üéØ –ò–∑–º–µ–Ω–µ–Ω–∏—è:"
    echo "   ‚Ä¢ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤"
    echo "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç 3000 (–∫–∞–∫ –≤ backend)"
    echo "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∫–∞–∫ –≤ VS Code"
    echo "   ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —ç—Ö–æ"
    echo ""
    echo "üöÄ –¢–µ–ø–µ—Ä—å —Ç–µ—Ä–º–∏–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ VS Code!"
else
    echo "‚ùå –û—à–∏–±–∫–∏ –≤ —Å–±–æ—Ä–∫–µ"
fi