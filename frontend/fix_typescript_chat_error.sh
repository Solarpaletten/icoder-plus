#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TYPESCRIPT –û–®–ò–ë–ö–ò –í AI CHAT"
echo "=========================================="

# –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –≤ AIChat.tsx
cat > src/components/AIChat.tsx << 'EOF'
import { useState, useRef, useEffect } from 'react';
import { Send, Bot, Sparkles, User, Trash2, Copy, RotateCcw } from 'lucide-react';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  agent: 'dashka' | 'claudy' | 'both';
  timestamp: Date;
}

interface AIChatProps {
  activeAgent: 'dashka' | 'claudy' | 'both';
  onAgentChange: (agent: 'dashka' | 'claudy' | 'both') => void;
}

export function AIChat({ activeAgent, onAgentChange }: AIChatProps) {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø Dashka - –≤–∞—à –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –∫–æ–¥–∞ –∏ —Ä–µ–≤—å—é–µ—Ä. –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞.',
      agent: 'dashka',
      timestamp: new Date()
    },
    {
      id: '2', 
      role: 'assistant',
      content: '–ê —è Claudy - –ø–æ–º–æ–≥—É —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á. –ü–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!',
      agent: 'claudy',
      timestamp: new Date()
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      agent: activeAgent,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
    setTimeout(() => {
      const responses: ChatMessage[] = [];
      
      if (activeAgent === 'dashka' || activeAgent === 'both') {
        responses.push({
          id: `dashka-${Date.now()}`,
          role: 'assistant',
          content: generateDashkaResponse(inputMessage),
          agent: 'dashka',
          timestamp: new Date()
        });
      }
      
      if (activeAgent === 'claudy' || activeAgent === 'both') {
        responses.push({
          id: `claudy-${Date.now()}`,
          role: 'assistant', 
          content: generateClaudyResponse(inputMessage),
          agent: 'claudy',
          timestamp: new Date()
        });
      }

      setMessages(prev => [...prev, ...responses]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateDashkaResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞') || input.includes('—Å—Ç—Ä—É–∫—Ç—É—Ä–∞')) {
      return '–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.';
    } else if (input.includes('–∫–æ–¥') || input.includes('—Ä–µ–≤—å—é')) {
      return '–ü—Ä–∏ —Ä–µ–≤—å—é –∫–æ–¥–∞ –æ–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞: —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω–æ.';
    } else if (input.includes('–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')) {
      return '–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É, –º–µ–º–æ–∏–∑–∞—Ü–∏—é, –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤ –∏ code splitting.';
    } else {
      return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö–∞–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ.`;
    }
  };

  const generateClaudyResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('–∫–æ–¥') || input.includes('–Ω–∞–ø–∏—Å–∞—Ç—å')) {
      return '–ì–æ—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥! –£–∫–∞–∂–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é (React, TypeScript, Python) –∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞–º —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä.';
    } else if (input.includes('–∫–æ–º–ø–æ–Ω–µ–Ω—Ç')) {
      return '–°–æ–∑–¥–∞–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –ù—É–∂–µ–Ω functional –∏–ª–∏ class component? –ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å? –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö—É–∫–∏?';
    } else if (input.includes('—Ñ—É–Ω–∫—Ü–∏—è')) {
      return '–ù–∞–ø–∏—à—É —Ñ—É–Ω–∫—Ü–∏—é. –£–∫–∞–∂–∏—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.';
    } else if (input.includes('–∏—Å–ø—Ä–∞–≤–∏—Ç—å') || input.includes('–æ—à–∏–±–∫–∞')) {
      return '–ü–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —Å –æ—à–∏–±–∫–æ–π - –Ω–∞–π–¥—É –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.';
    } else {
      return `–ü–æ–Ω—è–ª –∑–∞–¥–∞—á—É! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å - –Ω–∞–ø–∏—à—É —Ä–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ.`;
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    setMessages([]);
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò - —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤—Å–µ —Å–ª—É—á–∞–∏
  const getAgentIcon = (agent: 'dashka' | 'claudy' | 'both') => {
    if (agent === 'dashka') return <Bot size={16} className="text-blue-400" />;
    if (agent === 'claudy') return <Sparkles size={16} className="text-green-400" />;
    return <Bot size={16} className="text-purple-400" />; // –¥–ª—è 'both'
  };

  const getAgentColor = (agent: 'dashka' | 'claudy' | 'both') => {
    if (agent === 'dashka') return 'border-blue-500';
    if (agent === 'claudy') return 'border-green-500';
    return 'border-purple-500'; // –¥–ª—è 'both'
  };

  const getAgentName = (agent: 'dashka' | 'claudy' | 'both') => {
    if (agent === 'dashka') return 'Dashka';
    if (agent === 'claudy') return 'Claudy';
    return 'Both'; // –¥–ª—è 'both'
  };

  return (
    <div className="h-full flex flex-col">
      {/* Agent Selector */}
      <div className="p-3 border-b border-gray-700">
        <div className="flex space-x-1">
          <button
            onClick={() => onAgentChange('dashka')}
            className={`flex-1 px-3 py-2 rounded text-xs font-medium transition-colors flex items-center justify-center space-x-1 ${
              activeAgent === 'dashka'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            <Bot size={12} />
            <span>Dashka</span>
          </button>
          
          <button
            onClick={() => onAgentChange('claudy')}
            className={`flex-1 px-3 py-2 rounded text-xs font-medium transition-colors flex items-center justify-center space-x-1 ${
              activeAgent === 'claudy'
                ? 'bg-green-600 text-white'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            <Sparkles size={12} />
            <span>Claudy</span>
          </button>
          
          <button
            onClick={() => onAgentChange('both')}
            className={`flex-1 px-3 py-2 rounded text-xs font-medium transition-colors flex items-center justify-center space-x-1 ${
              activeAgent === 'both'
                ? 'bg-purple-600 text-white'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            <span>Both</span>
          </button>
        </div>
        
        {/* Status */}
        <div className="mt-2 text-xs text-gray-400 text-center">
          {activeAgent === 'both' ? 
            '–û—Ç–ø—Ä–∞–≤–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º' : 
            `–ê–∫—Ç–∏–≤–µ–Ω: ${activeAgent === 'dashka' ? 'Dashka (–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä)' : 'Claudy (–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä)'}`
          }
        </div>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-3 space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg text-sm ${
                message.role === 'user'
                  ? 'bg-blue-600 text-white'
                  : `bg-gray-700 text-gray-100 border-l-2 ${getAgentColor(message.agent)}`
              }`}
            >
              {message.role === 'assistant' && (
                <div className="flex items-center space-x-2 mb-1 text-xs opacity-75">
                  {getAgentIcon(message.agent)}
                  <span className="font-medium">
                    {getAgentName(message.agent)}
                  </span>
                </div>
              )}
              
              <div className="whitespace-pre-wrap">{message.content}</div>
              
              <div className="flex items-center justify-between mt-2">
                <span className="text-xs opacity-50">
                  {message.timestamp.toLocaleTimeString()}
                </span>
                {message.role === 'assistant' && (
                  <button
                    onClick={() => copyMessage(message.content)}
                    className="p-1 hover:bg-gray-600 rounded"
                    title="Copy message"
                  >
                    <Copy size={10} />
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-gray-700 text-gray-100 px-3 py-2 rounded-lg text-sm flex items-center space-x-2">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <span className="text-xs">Thinking...</span>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="border-t border-gray-700 p-3">
        <div className="flex items-end space-x-2">
          <div className="flex-1">
            <textarea
              ref={textareaRef}
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder={`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${activeAgent === 'both' ? '–æ–±–æ–∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤' : activeAgent}...`}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-sm text-gray-100 placeholder-gray-400 resize-none focus:outline-none focus:border-blue-500"
              rows={2}
              disabled={isLoading}
            />
          </div>
          
          <div className="flex flex-col space-y-1">
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="p-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed rounded-lg transition-colors"
              title="Send message (Enter)"
            >
              <Send size={16} className="text-white" />
            </button>
            
            <button
              onClick={clearChat}
              className="p-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
              title="Clear chat"
            >
              <Trash2 size={16} className="text-gray-300" />
            </button>
          </div>
        </div>
        
        <div className="mt-2 text-xs text-gray-500 text-center">
          Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        </div>
      </div>
    </div>
  );
}
EOF

echo "‚úÖ AIChat.tsx –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 'both' –≤ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É
echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π AI Chat..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ TypeScript –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! AI Chat –≥–æ—Ç–æ–≤"
else
    echo "‚ùå –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å"
fi