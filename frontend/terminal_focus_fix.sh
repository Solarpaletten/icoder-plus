#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–ö–£–°–ê –ò DIMENSIONS –¢–ï–†–ú–ò–ù–ê–õ–ê"
echo "=========================================="

# –°–æ–∑–¥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é XTermTerminal —Å –ª—É—á—à–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
cat > src/components/XTermTerminal.tsx << 'EOF'
import { useEffect, useRef, useState } from 'react';
import { Terminal } from '@xterm/xterm';
import { FitAddon } from '@xterm/addon-fit';
import { WebLinksAddon } from '@xterm/addon-web-links';
import '@xterm/xterm/css/xterm.css';
import { terminalService } from '../services/terminalService';

interface XTermTerminalProps {
  isVisible: boolean;
  height: number;
}

export function XTermTerminal({ isVisible, height }: XTermTerminalProps) {
  const terminalRef = useRef<HTMLDivElement>(null);
  const xtermRef = useRef<Terminal | null>(null);
  const fitAddonRef = useRef<FitAddon | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');
  const [isTerminalReady, setIsTerminalReady] = useState(false);

  useEffect(() => {
    if (!terminalRef.current || !isVisible) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const initTerminal = () => {
      try {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const terminal = new Terminal({
          cursorBlink: true,
          fontSize: 14,
          fontFamily: '"Cascadia Code", "Fira Code", "SF Mono", Monaco, monospace',
          theme: {
            background: '#1e1e1e',
            foreground: '#d4d4d4',
            cursor: '#ffffff',
            black: '#000000',
            red: '#cd3131',
            green: '#0dbc79',
            yellow: '#e5e510',
            blue: '#2472c8',
            magenta: '#bc3fbc',
            cyan: '#11a8cd',
            white: '#e5e5e5'
          },
          scrollback: 1000,
          tabStopWidth: 4,
          allowProposedApi: true,
          cols: 80,  // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
          rows: 24
        });

        // –°–æ–∑–¥–∞–µ–º –∞–¥–¥–æ–Ω—ã
        const fitAddon = new FitAddon();
        const webLinksAddon = new WebLinksAddon();

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–¥–æ–Ω—ã
        terminal.loadAddon(fitAddon);
        terminal.loadAddon(webLinksAddon);

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
        terminal.open(terminalRef.current!);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        xtermRef.current = terminal;
        fitAddonRef.current = fitAddon;

        // –ñ–¥–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ DOM
        setTimeout(() => {
          try {
            fitAddon.fit();
            setIsTerminalReady(true);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å
            terminal.focus();
            
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            terminal.writeln('\x1b[1;36miCoder Plus Terminal v2.0\x1b[0m');
            terminal.writeln('\x1b[32mReal bash connection established\x1b[0m');
            terminal.writeln('');

          } catch (error) {
            console.warn('Fit addon error:', error);
            setIsTerminalReady(true); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ fit
          }
        }, 100);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        terminal.onData((data) => {
          if (isTerminalReady && terminalService.getConnectionStatus()) {
            terminalService.sendInput(data);
          }
        });

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É
        connectTerminal();

      } catch (error) {
        console.error('Terminal initialization error:', error);
        setConnectionStatus('error');
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const timer = setTimeout(initTerminal, 50);

    return () => {
      clearTimeout(timer);
      if (xtermRef.current) {
        xtermRef.current.dispose();
        xtermRef.current = null;
        fitAddonRef.current = null;
        setIsTerminalReady(false);
      }
    };
  }, [isVisible]);

  const connectTerminal = async () => {
    setConnectionStatus('connecting');

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    terminalService.off('connect', () => {});
    terminalService.off('disconnect', () => {});
    terminalService.off('error', () => {});
    terminalService.off('data', () => {});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    terminalService.on('connect', () => {
      setConnectionStatus('connected');
      if (xtermRef.current && isTerminalReady) {
        xtermRef.current.clear();
        xtermRef.current.writeln('\x1b[32m‚úÖ Connected! Type commands:\x1b[0m');
        xtermRef.current.writeln('');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          xtermRef.current?.focus();
        }, 100);
      }
    });

    terminalService.on('disconnect', () => {
      setConnectionStatus('disconnected');
      if (xtermRef.current) {
        xtermRef.current.writeln('\r\n\x1b[31m‚ùå Disconnected\x1b[0m');
      }
    });

    terminalService.on('error', (message: string) => {
      setConnectionStatus('error');
      if (xtermRef.current) {
        xtermRef.current.writeln(`\r\n\x1b[31m‚ùå Error: ${message}\x1b[0m`);
        xtermRef.current.writeln('\x1b[33müí° Click terminal and try typing\x1b[0m');
      }
    });

    terminalService.on('data', (data: string) => {
      if (xtermRef.current && isTerminalReady) {
        xtermRef.current.write(data);
      }
    });

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connected = await terminalService.connect();
    if (!connected) {
      setConnectionStatus('error');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∞
  const handleTerminalClick = () => {
    if (xtermRef.current && isTerminalReady) {
      xtermRef.current.focus();
    }
  };

  // –ü–æ–¥–≥–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã
  useEffect(() => {
    if (fitAddonRef.current && isVisible && isTerminalReady) {
      const timer = setTimeout(() => {
        try {
          fitAddonRef.current?.fit();
          xtermRef.current?.focus();
        } catch (error) {
          console.warn('Resize error:', error);
        }
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [height, isVisible, isTerminalReady]);

  return (
    <div className="h-full flex flex-col bg-gray-900">
      {/* Connection Status */}
      <div className="flex items-center justify-between px-3 py-1 bg-gray-800 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${
            connectionStatus === 'connected' ? 'bg-green-400' :
            connectionStatus === 'connecting' ? 'bg-yellow-400 animate-pulse' :
            connectionStatus === 'error' ? 'bg-orange-400' :
            'bg-red-400'
          }`} />
          <span className="text-xs text-gray-400">
            {connectionStatus === 'connected' ? 'Backend Connected - Click and type!' :
             connectionStatus === 'connecting' ? 'Connecting...' :
             connectionStatus === 'error' ? 'Connected - Click terminal area' :
             'Disconnected'}
          </span>
        </div>
        
        <button
          onClick={() => xtermRef.current?.focus()}
          className="text-xs text-blue-400 hover:text-blue-300"
        >
          Focus Terminal
        </button>
      </div>

      {/* XTerm Container */}
      <div 
        ref={terminalRef} 
        className="flex-1 p-2 overflow-hidden cursor-text"
        style={{ height: `${height - 40}px` }}
        onClick={handleTerminalClick}
        title="Click to focus terminal"
      />
      
      {/* Help text */}
      <div className="px-3 py-1 bg-gray-800 border-t border-gray-700">
        <span className="text-xs text-gray-500">
          Click terminal area and type commands (pwd, ls, cd, etc.)
        </span>
      </div>
    </div>
  );
}
EOF

echo "‚úÖ XTermTerminal –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å –ª—É—á—à–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
    echo "üéØ –ò–∑–º–µ–Ω–µ–Ω–∏—è:"
    echo "   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ dimensions"
    echo "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å"
    echo "   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ 'Focus Terminal'"
    echo "   ‚Ä¢ –Ø–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã cols/rows"
    echo "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–ª—É"
    echo "   ‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω–∏–∑—É"
    echo ""
    echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
    echo "   1. –ö–ª–∏–∫–Ω—É—Ç—å –≤ –æ–±–ª–∞—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
    echo "   2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'Focus Terminal'"
    echo "   3. –í–≤–µ—Å—Ç–∏: pwd –∏–ª–∏ ls"
else
    echo "‚ùå –û—à–∏–±–∫–∏ –≤ —Å–±–æ—Ä–∫–µ"
fi