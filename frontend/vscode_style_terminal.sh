#!/bin/bash

echo "üîß VS CODE –°–¢–ò–õ–¨ –¢–ï–†–ú–ò–ù–ê–õ–ê"
echo "=========================="
echo "–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ –∫–∞–∫ –≤ VS Code"

# –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ —Å—Ç–∏–ª–µ VS Code
cat > src/components/VSCodeTerminal.tsx << 'EOF'
import { useEffect, useRef, useState } from 'react';

interface VSCodeTerminalProps {
  isVisible: boolean;
  height: number;
}

export function VSCodeTerminal({ isVisible, height }: VSCodeTerminalProps) {
  const [lines, setLines] = useState<string[]>(['Connected to bash terminal!', '']);
  const [currentInput, setCurrentInput] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [currentDir, setCurrentDir] = useState('~');
  const wsRef = useRef<WebSocket | null>(null);
  const terminalRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (!isVisible) return;

    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const ws = new WebSocket('ws://localhost:3000/terminal');
    wsRef.current = ws;

    ws.onopen = () => {
      setIsConnected(true);
      setLines(['Connected to bash terminal!', '']);
    };

    ws.onmessage = (event) => {
      const data = event.data;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      if (data.includes('$')) {
        // –≠—Ç–æ –ø—Ä–æ–º–ø—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const parts = data.split('$');
        if (parts[0].trim()) {
          const dirMatch = parts[0].match(/([^/\s]+)?\s*\$?\s*$/);
          if (dirMatch) {
            setCurrentDir(dirMatch[1] || '~');
          }
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∫ —Å—Ç—Ä–æ–∫–∞–º
      const newLines = data.split('\n');
      setLines(prev => {
        const updated = [...prev];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        newLines.forEach((line, index) => {
          if (index === 0) {
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            updated[updated.length - 1] += line;
          } else {
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–µ
            updated.push(line);
          }
        });
        
        return updated;
      });

      // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
      setTimeout(() => {
        if (terminalRef.current) {
          terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
        }
      }, 10);
    };

    ws.onclose = () => {
      setIsConnected(false);
      setLines(prev => [...prev, 'Connection closed']);
    };

    ws.onerror = () => {
      setIsConnected(false);
      setLines(prev => [...prev, 'Connection error']);
    };

    return () => {
      ws.close();
    };
  }, [isVisible]);

  const executeCommand = () => {
    if (!currentInput.trim() || !wsRef.current || !isConnected) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≤—ã–≤–æ–¥
    setLines(prev => [...prev, `${currentDir}$ ${currentInput}`, '']);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    wsRef.current.send(currentInput + '\r');
    
    // –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
    setCurrentInput('');
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      executeCommand();
    } else if (e.ctrlKey && e.key === 'c') {
      e.preventDefault();
      if (wsRef.current && isConnected) {
        wsRef.current.send('\x03');
        setLines(prev => [...prev, '^C', '']);
        setCurrentInput('');
      }
    } else if (e.ctrlKey && e.key === 'l') {
      e.preventDefault();
      setLines(['']);
      setCurrentInput('');
    }
  };

  // –§–æ–∫—É—Å –Ω–∞ input –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
  const handleTerminalClick = () => {
    inputRef.current?.focus();
  };

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (isVisible && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isVisible]);

  return (
    <div className="h-full flex flex-col bg-black text-green-400 font-mono">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between px-3 py-1 bg-gray-800 text-white text-sm border-b border-gray-600">
        <div className="flex items-center space-x-2">
          <span className={`w-2 h-2 rounded-full ${
            isConnected ? 'bg-green-400' : 'bg-red-400'
          }`}></span>
          <span>Terminal - {currentDir}</span>
        </div>
        <span className="text-gray-400 text-xs">
          Ctrl+C: interrupt, Ctrl+L: clear
        </span>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ */}
      <div 
        ref={terminalRef}
        className="flex-1 p-3 overflow-y-auto cursor-text"
        style={{ height: `${height - 80}px` }}
        onClick={handleTerminalClick}
      >
        {/* –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ */}
        {lines.map((line, index) => (
          <div key={index} className="leading-relaxed">
            {line}
          </div>
        ))}
        
        {/* –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞ */}
        {isConnected && (
          <div className="flex items-center">
            <span className="mr-1">{currentDir}$</span>
            <input
              ref={inputRef}
              type="text"
              value={currentInput}
              onChange={(e) => setCurrentInput(e.target.value)}
              onKeyDown={handleKeyDown}
              className="flex-1 bg-transparent outline-none text-green-400 caret-green-400"
              style={{ minWidth: '10px' }}
              autoComplete="off"
              spellCheck={false}
            />
          </div>
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–Ω–∏–∑—É */}
      <div className="px-3 py-1 bg-gray-900 border-t border-gray-700 text-xs text-gray-500">
        Try: pwd, ls, cd /tmp, whoami, ps aux, top
      </div>
    </div>
  );
}
EOF

echo "‚úÖ VSCodeTerminal —Å–æ–∑–¥–∞–Ω"

# –û–±–Ω–æ–≤–∏—Ç—å Terminal.tsx
cat > src/components/Terminal.tsx << 'EOF'
import { VSCodeTerminal } from './VSCodeTerminal';

interface TerminalProps {
  isVisible?: boolean;
  height?: number;
}

export function Terminal({ isVisible = true, height = 200 }: TerminalProps) {
  return <VSCodeTerminal isVisible={isVisible} height={height} />;
}
EOF

echo "‚úÖ Terminal.tsx –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è VSCodeTerminal"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ VS Code —Å—Ç–∏–ª—å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤!"
    echo "üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:"
    echo "   ‚Ä¢ –ï–¥–∏–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞"
    echo "   ‚Ä¢ –ü—Ä–æ–º–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    echo "   ‚Ä¢ –ö–ª–∏–∫ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –≤–≤–æ–¥"
    echo "   ‚Ä¢ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫"
    echo "   ‚Ä¢ Ctrl+C –∏ Ctrl+L —Ä–∞–±–æ—Ç–∞—é—Ç"
    echo ""
    echo "üíª –¢–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ VS Code!"
else
    echo "‚ùå –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏"
fi