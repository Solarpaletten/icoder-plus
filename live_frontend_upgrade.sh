#!/bin/bash

echo "üöÄ –û–ë–ù–û–í–õ–Ø–ï–ú FRONTEND - –ñ–ò–í–ê–Ø –°–í–Ø–ó–¨ –° BACKEND!"

# ============================================================================
# 1. –°–û–ó–î–ê–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–´–ô index.html (–ö–û–†–ï–ù–¨ FRONTEND/)
# ============================================================================

cat > frontend/index.html << 'EOF'
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>iCoder Plus ‚Äî AI-first IDE v2.0</title>
  </head>
  <body>
    <div id="root"></div>
    <script>
      // –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ Vite env –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä—è–º–æ —Ç—É—Ç:
      window.API_BASE = "https://icoder-plus.onrender.com";
    </script>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

echo "‚úÖ index.html —Å–æ–∑–¥–∞–Ω —Å –∂–∏–≤—ã–º API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"

# ============================================================================
# 2. –°–û–ó–î–ê–¢–¨ src/main.jsx
# ============================================================================

mkdir -p frontend/src

cat > frontend/src/main.jsx << 'EOF'
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App.jsx";
import "./index.css";

createRoot(document.getElementById("root")).render(<App />);
EOF

echo "‚úÖ main.jsx —Å–æ–∑–¥–∞–Ω"

# ============================================================================
# 3. –°–û–ó–î–ê–¢–¨ –°–¢–ò–õ–ò src/index.css
# ============================================================================

cat > frontend/src/index.css << 'EOF'
:root {
  --bg: #0b1220;
  --panel: #121a2a;
  --text: #e8ecf1;
  --muted: #9fb0c6;
  --green: #29d398;
  --yellow: #f9cc45;
  --red: #ff6b6b;
  --brand: #7b5cff;
}
* { box-sizing: border-box; }
html, body, #root { height: 100%; }
body {
  margin: 0;
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial;
  color: var(--text);
  background: radial-gradient(1200px 600px at 20% 0%, #1a2340 0%, #0b1220 55%, #0b1220 100%);
}
.container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 32px 20px 80px;
}
.badge { padding: 6px 10px; border-radius: 999px; background: rgba(123,92,255,.12); color: #c9b8ff; font-weight: 600; font-size: 12px; letter-spacing: .2px; }
.h1 { font-size: 44px; font-weight: 800; letter-spacing: .4px; margin: 18px 0 8px; }
.sub { color: var(--muted); margin-bottom: 28px; }
.grid { display: grid; gap: 18px; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); }
.card { background: var(--panel); border: 1px solid rgba(255,255,255,0.06); border-radius: 14px; padding: 18px; }
.kv { display: flex; align-items: center; gap: 10px; }
.dot { width: 9px; height: 9px; border-radius: 999px; }
.row { display: flex; align-items: center; gap: 10px; }
.btn {
  background: linear-gradient(135deg, var(--brand), #4f46e5);
  color: white; border: none; padding: 10px 14px; border-radius: 10px;
  cursor: pointer; font-weight: 700;
}
.btn[disabled] { opacity: .6; cursor: not-allowed; }
.code {
  background: #0b1120; border: 1px solid rgba(255,255,255,0.06);
  padding: 12px; border-radius: 10px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
  color: #cde1ff; font-size: 12px; overflow: auto;
}
hr { border: none; height: 1px; background: rgba(255,255,255,0.06); margin: 18px 0; }
.small { color: var(--muted); font-size: 13px; }
EOF

echo "‚úÖ –°—Ç–∏–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"

# ============================================================================
# 4. –°–û–ó–î–ê–¢–¨ –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ src/App.jsx
# ============================================================================

cat > frontend/src/App.jsx << 'EOF'
import React, { useEffect, useMemo, useState } from "react";

const apiBase =
  import.meta.env.VITE_API_URL?.replace(/\/$/, "") ||
  (typeof window !== "undefined" && window.API_BASE) ||
  "";

export default function App() {
  const [health, setHealth] = useState(null);
  const [checking, setChecking] = useState(false);
  const [fixing, setFixing] = useState(false);
  const [chat, setChat] = useState({ q: "", a: "" });
  const reachable = useMemo(() => Boolean(apiBase), []);

  useEffect(() => {
    if (!reachable) return;
    (async () => {
      setChecking(true);
      try {
        const res = await fetch(`${apiBase}/health`, { cache: "no-store" });
        const json = await res.json();
        setHealth({ ok: res.ok, data: json });
      } catch (e) {
        setHealth({ ok: false, data: { error: String(e) } });
      } finally {
        setChecking(false);
      }
    })();
  }, [reachable]);

  async function runFix() {
    setFixing(true);
    try {
      const res = await fetch(`${apiBase}/api/ai/fix/apply`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({
          fileName: "demo.js",
          code: "var message = 'Hello iCoder Plus'; console.log(message);",
        }),
      });
      const json = await res.json();
      const fixed = json?.data?.fixedCode ?? "(no result)";
      alert("AI Fix result:\n\n" + fixed);
    } catch (e) {
      alert("Fix error: " + e);
    } finally {
      setFixing(false);
    }
  }

  async function askChat() {
    const q = chat.q.trim();
    if (!q) return;
    try {
      const res = await fetch(`${apiBase}/api/ai/chat`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({
          message: q,
          fileName: "App.jsx",
          code: "function greet(){ return 'Hello'; }",
        }),
      });
      const json = await res.json();
      setChat((s) => ({ ...s, a: json?.response || json?.data?.message || "No reply" }));
    } catch (e) {
      setChat((s) => ({ ...s, a: "Error: " + e }));
    }
  }

  return (
    <div className="container">
      <div className="badge">AI-first IDE v2.0</div>
      <div className="h1">Welcome to the Future of Coding üöÄ</div>
      <div className="sub">Full-stack on Render ‚Ä¢ Backend: {apiBase || "‚Äì not set ‚Äì"}</div>

      <div className="grid">
        <div className="card">
          <div className="row" style={{ justifyContent: "space-between" }}>
            <div className="kv">
              <div className="dot" style={{ background: "#29d398" }} />
              <strong>Frontend</strong>
            </div>
            <span className="small">Live & running</span>
          </div>
          <hr />
          <div className="small">This is the React app deployed on Render Static Site.</div>
        </div>

        <div className="card">
          <div className="row" style={{ justifyContent: "space-between" }}>
            <div className="kv">
              <div
                className="dot"
                style={{ background: checking ? "#f9cc45" : health?.ok ? "#29d398" : "#ff6b6b" }}
              />
              <strong>Backend</strong>
            </div>
            <span className="small">
              {checking ? "Checking‚Ä¶" : health?.ok ? "Connected" : "Not reachable"}
            </span>
          </div>
          <hr />
          <div className="code" style={{ maxHeight: 140 }}>
            {checking && "fetching /health ‚Ä¶"}
            {!checking && health && JSON.stringify(health.data, null, 2)}
            {!checking && !health && "‚Äî"}
          </div>
          <div style={{ marginTop: 12 }} className="small">
            Health: <code>{apiBase ? `${apiBase}/health` : "‚Äî"}</code>
          </div>
        </div>
      </div>

      <div className="card" style={{ marginTop: 18 }}>
        <div className="row" style={{ justifyContent: "space-between" }}>
          <strong>Quick Actions</strong>
          <button className="btn" onClick={runFix} disabled={!reachable || fixing}>
            {fixing ? "Applying‚Ä¶" : "ü§ñ Apply AI Fix"}
          </button>
        </div>
        <hr />
        <div className="row" style={{ gap: 8 }}>
          <input
            placeholder="Ask AI about your code‚Ä¶"
            value={chat.q}
            onChange={(e) => setChat((s) => ({ ...s, q: e.target.value }))}
            style={{
              flex: 1,
              background: "#0b1120",
              color: "white",
              border: "1px solid rgba(255,255,255,.08)",
              borderRadius: 10,
              padding: "10px 12px",
              outline: "none",
            }}
          />
          <button className="btn" onClick={askChat} disabled={!reachable}>
            üí¨ Ask
          </button>
        </div>
        {chat.a && (
          <>
            <hr />
            <div className="code">{chat.a}</div>
          </>
        )}
      </div>

      <div className="card" style={{ marginTop: 18 }}>
        <strong>Endpoints</strong>
        <hr />
        <div className="small">
          <div>Health: <code>{apiBase}/health</code></div>
          <div>AI Analyze: <code>{apiBase}/api/ai/analyze</code></div>
          <div>AI Fix: <code>{apiBase}/api/ai/fix/apply</code></div>
          <div>AI Chat: <code>{apiBase}/api/ai/chat</code></div>
        </div>
      </div>

      <div className="card" style={{ marginTop: 18 }}>
        <strong>üöÄ Deployment Status</strong>
        <hr />
        <div className="small">
          <div>‚úÖ Frontend: Render Static Site</div>
          <div>‚úÖ Backend: Render Web Service</div>
          <div>‚úÖ API Connection: {health?.ok ? "Active" : "Testing..."}</div>
          <div>‚ö° Version: 2.0.0</div>
        </div>
      </div>
    </div>
  );
}
EOF

echo "‚úÖ App.jsx —Å–æ–∑–¥–∞–Ω —Å –∂–∏–≤—ã–º API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"

# ============================================================================
# 5. –°–û–ó–î–ê–¢–¨ .env.production
# ============================================================================

cat > frontend/.env.production << 'EOF'
VITE_API_URL=https://icoder-plus.onrender.com
EOF

echo "‚úÖ .env.production —Å–æ–∑–¥–∞–Ω"

# ============================================================================
# 6. –û–ë–ù–û–í–ò–¢–¨ package.json –î–õ–Ø VITE BUILD
# ============================================================================

cat > frontend/package.json << 'EOF'
{
  "name": "icoder-plus-frontend-react",
  "version": "2.0.0",
  "type": "module",
  "description": "iCoder Plus Frontend - Live React App",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.1.1",
    "vite": "^5.0.0"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "keywords": ["react", "vite", "ai", "ide", "render"],
  "author": "Solar IT Team",
  "license": "MIT"
}
EOF

echo "‚úÖ package.json –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è React + Vite"

# ============================================================================
# 7. –°–û–ó–î–ê–¢–¨ vite.config.js
# ============================================================================

cat > frontend/vite.config.js << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    host: true,
  },
  build: {
    outDir: 'dist',
    sourcemap: false,
    minify: 'terser'
  },
  define: {
    __APP_VERSION__: JSON.stringify('2.0.0')
  }
})
EOF

echo "‚úÖ vite.config.js —Å–æ–∑–¥–∞–Ω"

# ============================================================================
# 8. –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –°–ë–û–†–ö–£
# ============================================================================

echo "üî® –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é React —Å–±–æ—Ä–∫—É..."
cd frontend

# –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
rm -rf node_modules dist package-lock.json

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm install

if [ $? -eq 0 ]; then
    echo "‚úÖ React –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    # –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
    npm run build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Vite —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!"
        
        if [ -d "dist" ]; then
            echo "üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ dist/:"
            ls -la dist/
            echo "üìÅ –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏:"
            du -sh dist/
        fi
        
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
        exit 1
    fi
    
else
    echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    exit 1
fi

cd ..

# ============================================================================
# 9. SMOKE TEST –ß–ï–ö–õ–ò–°–¢
# ============================================================================

echo ""
echo "üõ∞Ô∏è SMOKE TEST –ß–ï–ö–õ–ò–°–¢:"
echo ""
echo "‚úÖ React App —Å–æ–∑–¥–∞–Ω —Å –∂–∏–≤—ã–º API"
echo "‚úÖ Backend Health –ø—Ä–æ–≤–µ—Ä–∫–∞"
echo "‚úÖ AI Fix –∫–Ω–æ–ø–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤)"
echo "‚úÖ AI Chat —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"  
echo "‚úÖ Endpoints –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
echo "‚úÖ Deployment —Å—Ç–∞—Ç—É—Å"
echo ""

# ============================================================================
# 10. –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –î–ï–ü–õ–û–Ø
# ============================================================================

echo "üöÄ –ì–û–¢–û–í –ö –ó–ê–ú–ï–ù–ï –ó–ê–ì–õ–£–®–ö–ò!"
echo ""
echo "üìã –ß–¢–û –°–û–ó–î–ê–ù–û:"
echo "- index.html —Å React –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"
echo "- React App —Å –∂–∏–≤—ã–º backend —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
echo "- Vite —Å–±–æ—Ä–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
echo "- –ö—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∏–ª–∏ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"
echo "- –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –∫ Render backend"
echo ""
echo "üéØ –î–ï–ü–õ–û–ô:"
echo ""
echo "git add ."
echo "git commit -m 'üöÄ Upgrade to live React frontend with real API calls'"
echo "git push origin main"
echo ""
echo "üåê –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "- –ó–∞–≥–ª—É—à–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –∂–∏–≤–æ–π React –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
echo "- –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ backend –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
echo "- –†–∞–±–æ—á–∏–µ AI Fix –∏ Chat —Ñ—É–Ω–∫—Ü–∏–∏"
echo "- –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö endpoints"
echo "- –ö—Ä–∞—Å–∏–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω"
echo ""
echo "üé™ –ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –ö–û–†–ê–ë–õ–¨ –ì–û–¢–û–í –ö –°–¢–ê–†–¢–£!"
