#!/bin/bash

echo "üîó –ü–û–î–ö–õ–Æ–ß–ê–ï–ú FRONTEND –ö BACKEND –ù–ê RENDER"

# ============================================================================
# 1. –ù–ê–°–¢–†–û–ò–¢–¨ ENVIRONMENT VARIABLES –î–õ–Ø PRODUCTION
# ============================================================================

cat > frontend/.env.production << 'EOF'
# Production Environment Variables for Frontend
VITE_API_URL=https://icoder-plus.onrender.com
VITE_APP_NAME=iCoder Plus
VITE_APP_VERSION=2.0.0
VITE_APP_DESCRIPTION=AI-first IDE in a bottom sheet
NODE_ENV=production
VITE_ENABLE_AI_FEATURES=true
VITE_ENABLE_LIVE_PREVIEW=true
EOF

echo "‚úÖ .env.production —Å–æ–∑–¥–∞–Ω —Å URL –Ω–∞—à–µ–≥–æ Render backend"

# ============================================================================
# 2. –û–ë–ù–û–í–ò–¢–¨ VITE CONFIG –î–õ–Ø PRODUCTION
# ============================================================================

cat > frontend/vite.config.js << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@components': resolve(__dirname, './src/components'),
      '@services': resolve(__dirname, './src/services'),
      '@utils': resolve(__dirname, './src/utils'),
      '@hooks': resolve(__dirname, './src/hooks')
    }
  },
  server: {
    port: 5173,
    host: true,
    open: true,
    proxy: {
      '/api': {
        target: process.env.NODE_ENV === 'production' 
          ? 'https://icoder-plus.onrender.com' 
          : 'http://localhost:3000',
        changeOrigin: true,
        secure: false
      }
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          editor: ['monaco-editor', '@monaco-editor/react'],
          utils: ['diff2html', 'clsx', 'axios']
        },
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js',
        assetFileNames: 'assets/[name]-[hash].[ext]'
      }
    },
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true
      }
    }
  },
  optimizeDeps: {
    include: [
      'react', 
      'react-dom', 
      'lucide-react', 
      'axios',
      'monaco-editor/esm/vs/language/typescript/ts.worker',
      'monaco-editor/esm/vs/language/json/json.worker',
      'monaco-editor/esm/vs/editor/editor.worker'
    ]
  },
  define: {
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version || '2.0.0'),
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)
  }
})
EOF

echo "‚úÖ vite.config.js –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render"

# ============================================================================
# 3. –û–ë–ù–û–í–ò–¢–¨ API CLIENT –î–õ–Ø RENDER BACKEND
# ============================================================================

mkdir -p frontend/src/services

cat > frontend/src/services/apiClient.js << 'EOF'
import axios from 'axios'

// API Base URL - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ environment variables
const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://icoder-plus.onrender.com'

console.log('üîó API Base URL:', API_BASE_URL)

// Create axios instance with default config
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json'
  }
})

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    // Log request in development
    if (import.meta.env.DEV) {
      console.log('üöÄ API Request:', {
        method: config.method?.toUpperCase(),
        url: `${config.baseURL}${config.url}`,
        data: config.data
      })
    }
    
    return config
  },
  (error) => {
    console.error('‚ùå Request Error:', error)
    return Promise.reject(error)
  }
)

// Response interceptor
apiClient.interceptors.response.use(
  (response) => {
    // Log response in development
    if (import.meta.env.DEV) {
      console.log('‚úÖ API Response:', {
        status: response.status,
        url: response.config.url,
        data: response.data
      })
    }
    
    return response
  },
  (error) => {
    // Handle common errors
    if (error.response) {
      const { status, data } = error.response
      
      switch (status) {
        case 401:
          console.error('üîê Unauthorized: Check your API key')
          break
        case 403:
          console.error('üö´ Forbidden: Insufficient permissions')
          break
        case 429:
          console.error('üêå Rate limited: Too many requests')
          break
        case 500:
          console.error('üí• Server error: Please try again later')
          break
        default:
          console.error('‚ö†Ô∏è API Error:', data?.message || error.message)
      }
    } else if (error.request) {
      console.error('üåê Network error: Unable to reach server at', API_BASE_URL)
    } else {
      console.error('‚ùå Request error:', error.message)
    }
    
    return Promise.reject(error)
  }
)

// AI Service API calls
export const aiAPI = {
  // Analyze code with AI
  analyze: async (code, fileName, analysisType = 'review', oldCode = null) => {
    const response = await apiClient.post('/api/ai/analyze', {
      code,
      fileName,
      analysisType,
      oldCode
    })
    return response.data
  },

  // Chat with AI
  chat: async (message, code = null, fileName = null) => {
    const response = await apiClient.post('/api/ai/chat', {
      message,
      code,
      fileName
    })
    return response.data
  },

  // Apply AI fixes
  applyFix: async (code, fileName) => {
    const response = await apiClient.post('/api/ai/fix/apply', {
      code,
      fileName
    })
    return response.data
  }
}

// Health check
export const healthAPI = {
  check: async () => {
    const response = await apiClient.get('/health')
    return response.data
  }
}

// Test connection
export const testConnection = async () => {
  try {
    const response = await apiClient.get('/')
    console.log('‚úÖ Backend connection successful:', response.data)
    return true
  } catch (error) {
    console.error('‚ùå Backend connection failed:', error.message)
    return false
  }
}

export default apiClient
EOF

echo "‚úÖ API Client –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render backend"

# ============================================================================
# 4. –°–û–ó–î–ê–¢–¨ –¢–ï–°–¢–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–í–Ø–ó–ò
# ============================================================================

mkdir -p frontend/src/components

cat > frontend/src/components/BackendStatus.jsx << 'EOF'
import { useState, useEffect } from 'react'
import { healthAPI, testConnection } from '../services/apiClient'

export default function BackendStatus() {
  const [status, setStatus] = useState('checking')
  const [backendInfo, setBackendInfo] = useState(null)
  const [error, setError] = useState(null)

  useEffect(() => {
    checkBackendStatus()
  }, [])

  const checkBackendStatus = async () => {
    try {
      setStatus('checking')
      setError(null)

      // Test basic connection
      const isConnected = await testConnection()
      
      if (!isConnected) {
        setStatus('error')
        setError('Cannot connect to backend')
        return
      }

      // Get health status
      const healthData = await healthAPI.check()
      setBackendInfo(healthData)
      setStatus('connected')

    } catch (err) {
      setStatus('error')
      setError(err.message)
    }
  }

  const getStatusColor = () => {
    switch (status) {
      case 'checking': return 'text-yellow-500'
      case 'connected': return 'text-green-500'
      case 'error': return 'text-red-500'
      default: return 'text-gray-500'
    }
  }

  const getStatusText = () => {
    switch (status) {
      case 'checking': return 'Checking connection...'
      case 'connected': return 'Backend connected ‚úÖ'
      case 'error': return 'Backend error ‚ùå'
      default: return 'Unknown status'
    }
  }

  return (
    <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white">Backend Status</h3>
        <button 
          onClick={checkBackendStatus}
          className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
        >
          Refresh
        </button>
      </div>
      
      <div className={`mt-2 font-medium ${getStatusColor()}`}>
        {getStatusText()}
      </div>

      {backendInfo && (
        <div className="mt-3 text-sm text-gray-300">
          <p>‚Ä¢ Version: {backendInfo.version}</p>
          <p>‚Ä¢ Environment: {backendInfo.environment}</p>
          <p>‚Ä¢ Port: {backendInfo.port}</p>
          <p>‚Ä¢ Tech: {backendInfo.tech}</p>
          <p className="text-xs text-gray-400 mt-1">
            {new Date(backendInfo.timestamp).toLocaleString()}
          </p>
        </div>
      )}

      {error && (
        <div className="mt-2 text-sm text-red-400 bg-red-900/20 p-2 rounded">
          Error: {error}
        </div>
      )}

      <div className="mt-3 text-xs text-gray-400">
        Backend URL: {import.meta.env.VITE_API_URL || 'https://icoder-plus.onrender.com'}
      </div>
    </div>
  )
}
EOF

echo "‚úÖ BackendStatus –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤—è–∑–∏"

# ============================================================================
# 5. –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û
# ============================================================================

echo "üî® –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ frontend..."
cd frontend

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if [ ! -d "node_modules" ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    npm install
fi

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–æ–∂–µ–º —Å–æ–±—Ä–∞—Ç—å
echo "üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ Frontend —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ frontend"
    exit 1
fi

cd ..

# ============================================================================
# 6. –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø
# ============================================================================

echo ""
echo "üöÄ FRONTEND –ù–ê–°–¢–†–û–ï–ù –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö RENDER!"
echo ""
echo "‚úÖ –ß–¢–û –ù–ê–°–¢–†–û–ï–ù–û:"
echo "- API URL: https://icoder-plus.onrender.com"
echo "- Environment variables (.env.production)"
echo "- API Client —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ endpoints"
echo "- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ backend"
echo ""
echo "üìã –í–ê–†–ò–ê–ù–¢–´ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø FRONTEND:"
echo ""
echo "üéØ –í–ê–†–ò–ê–ù–¢ 1 - Vercel:"
echo "cd frontend"
echo "npm run build"
echo "npx vercel --prod"
echo ""
echo "üéØ –í–ê–†–ò–ê–ù–¢ 2 - Netlify:"
echo "cd frontend"  
echo "npm run build"
echo "# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É dist/ –Ω–∞ Netlify"
echo ""
echo "üéØ –í–ê–†–ò–ê–ù–¢ 3 - GitHub Pages:"
echo "cd frontend"
echo "npm run build"
echo "# –ö–æ–º–º–∏—Ç–Ω—É—Ç—å dist/ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GitHub Pages"
echo ""
echo "‚úÖ –ì–û–¢–û–í–û –ö –ö–û–ú–ú–ò–¢–£:"
echo ""
echo "git add ."
echo "git commit -m 'üîó Connect frontend to Render backend'"
echo "git push origin main"
echo ""
echo "üåê –ü–û–°–õ–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø FRONTEND:"
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ frontend URL"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç BackendStatus"
echo "3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 'Backend connected ‚úÖ'"
echo ""
echo "üéØ Frontend —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Render backend!"
