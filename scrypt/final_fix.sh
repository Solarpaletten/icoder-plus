#!/bin/bash

echo "üî• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ 4 –æ—à–∏–±–∫–∏ TypeScript –≤ backend..."

# 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú IMPORT –¢–ò–ü–û–í
cat > backend/src/types/ai.ts << 'EOF'
// –¢–∏–ø—ã –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
export interface AIAnalysisRequest {
  code: string;
  filename: string;
  language?: string;
}

export interface AIAnalysisResponse {
  commitNote: string;
  aiReview: string[];
  suggestions: string[];
  aiFixed?: string;
}

export interface AIChatRequest {
  message: string;
  code?: string;
  context?: string;
}

export interface AIChatResponse {
  response: string;
}

export interface AIConfig {
  openaiApiKey: string;
  anthropicApiKey?: string;
  model: string;
  temperature: number;
  maxTokens: number;
}
EOF

# 2. –£–ë–ò–†–ê–ï–ú rate-limiter-flexible (—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π middleware)
cat > backend/src/middleware/rateLimiter.ts << 'EOF'
import { Request, Response, NextFunction } from 'express';

// –ü—Ä–æ—Å—Ç–æ–π in-memory rate limiter –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const requests = new Map<string, number[]>();

export const rateLimiterMiddleware = (req: Request, res: Response, next: NextFunction): void => {
  const clientIp = req.ip || req.socket.remoteAddress || 'unknown';
  const now = Date.now();
  const windowMs = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
  const maxRequests = 60; // 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

  if (!requests.has(clientIp)) {
    requests.set(clientIp, []);
  }

  const clientRequests = requests.get(clientIp)!;
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const recentRequests = clientRequests.filter(time => now - time < windowMs);
  requests.set(clientIp, recentRequests);

  if (recentRequests.length >= maxRequests) {
    res.status(429).json({ 
      error: 'Too Many Requests',
      message: `Rate limit exceeded. Max ${maxRequests} requests per minute.`
    });
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
  recentRequests.push(now);
  requests.set(clientIp, recentRequests);
  
  next();
};
EOF

# 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú ROUTES/AI.TS
cat > backend/src/routes/ai.ts << 'EOF'
import { Router, Request, Response, NextFunction } from 'express';
import { AIAnalysisRequest, AIAnalysisResponse, AIChatRequest, AIChatResponse } from '../types/ai.js';
import { generateCommitNote, generateAIReview, generateAIFix, generateChatResponse } from '../services/aiService.js';

const router = Router();

// POST /api/ai/analyze - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
router.post('/analyze', async (req: Request<{}, AIAnalysisResponse, AIAnalysisRequest>, res: Response, next: NextFunction): Promise<void> => {
  try {
    const { code, filename, language } = req.body;

    if (!code || !filename) {
      res.status(400).json({
        commitNote: '',
        aiReview: ['Error: Missing required fields'],
        suggestions: []
      });
      return;
    }

    const commitNote = await generateCommitNote(code, filename);
    const aiReview = await generateAIReview(code, language || 'javascript');
    const suggestions = aiReview;

    res.json({
      commitNote,
      aiReview,
      suggestions
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/ai/fix - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
router.post('/fix', async (req: Request, res: Response, next: NextFunction): Promise<void> => {
  try {
    const { code, filename } = req.body;

    if (!code) {
      res.status(400).json({ error: 'Code is required' });
      return;
    }

    const fixedCode = await generateAIFix(code);
    
    res.json({
      original: code,
      fixed: fixedCode,
      changes: ['Applied AI fixes']
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/ai/chat - –ß–∞—Ç —Å AI –æ –∫–æ–¥–µ
router.post('/chat', async (req: Request<{}, AIChatResponse, AIChatRequest>, res: Response, next: NextFunction): Promise<void> => {
  try {
    const { message, code, context } = req.body;

    if (!message) {
      res.status(400).json({ response: 'Message is required' });
      return;
    }

    const response = await generateChatResponse(message, code, context);
    
    res.json({ response });
  } catch (error) {
    next(error);
  }
});

export default router;
EOF

# 4. –ò–°–ü–†–ê–í–õ–Ø–ï–ú SERVICES/AISERVICE.TS
cat > backend/src/services/aiService.ts << 'EOF'
import OpenAI from 'openai';
import { AIConfig } from '../types/ai.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'demo-key'
});

const config: AIConfig = {
  openaiApiKey: process.env.OPENAI_API_KEY || 'demo-key',
  anthropicApiKey: process.env.ANTHROPIC_API_KEY,
  model: 'gpt-3.5-turbo',
  temperature: 0.7,
  maxTokens: 1000
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è commit note
export async function generateCommitNote(code: string, filename: string): Promise<string> {
  try {
    if (!config.openaiApiKey || config.openaiApiKey === 'demo-key') {
      return `üìù Update ${filename} - Added new functionality`;
    }

    const response = await openai.chat.completions.create({
      model: config.model,
      messages: [
        {
          role: 'system',
          content: 'Generate a concise commit message for this code change. Use emojis and be specific.'
        },
        {
          role: 'user',
          content: `File: ${filename}\nCode:\n${code}`
        }
      ],
      max_tokens: config.maxTokens,
      temperature: config.temperature
    });

    return response.choices[0]?.message?.content || `üìù Update ${filename}`;
  } catch (error) {
    console.error('AI Commit Note Error:', error);
    return `üìù Update ${filename} - AI service unavailable`;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI review
export async function generateAIReview(code: string, language: string = 'javascript'): Promise<string[]> {
  try {
    if (!config.openaiApiKey || config.openaiApiKey === 'demo-key') {
      return [
        '‚úÖ Code structure looks good',
        'üí° Consider adding error handling',
        'üîß Variable names could be more descriptive'
      ];
    }

    const response = await openai.chat.completions.create({
      model: config.model,
      messages: [
        {
          role: 'system',
          content: `Review this ${language} code and provide 3-5 specific suggestions for improvement. Focus on best practices, security, and maintainability.`
        },
        {
          role: 'user',
          content: code
        }
      ],
      max_tokens: config.maxTokens,
      temperature: config.temperature
    });

    const review = response.choices[0]?.message?.content || '';
    return review.split('\n').filter(line => line.trim().length > 0).slice(0, 5);
  } catch (error) {
    console.error('AI Review Error:', error);
    return ['ü§ñ AI review service temporarily unavailable'];
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
export async function generateAIFix(code: string): Promise<string> {
  try {
    // –ü—Ä–æ—Å—Ç—ã–µ –∞–≤—Ç–æ—Ñ–∏–∫—Å—ã –±–µ–∑ API
    let fixedCode = code
      .replace(/var\s+/g, 'const ')
      .replace(/console\.log\([^)]*\);\?/g, '')
      .replace(/===/g, '===')
      .trim();

    if (!config.openaiApiKey || config.openaiApiKey === 'demo-key') {
      return fixedCode;
    }

    const response = await openai.chat.completions.create({
      model: config.model,
      messages: [
        {
          role: 'system',
          content: 'Fix code issues and improve it. Return only the corrected code, no explanations.'
        },
        {
          role: 'user',
          content: code
        }
      ],
      max_tokens: config.maxTokens,
      temperature: 0.3
    });

    return response.choices[0]?.message?.content || fixedCode;
  } catch (error) {
    console.error('AI Fix Error:', error);
    return code; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ
export async function generateChatResponse(message: string, code?: string, context?: string): Promise<string> {
  try {
    if (!config.openaiApiKey || config.openaiApiKey === 'demo-key') {
      return `ü§ñ Hi! I would help you analyze your code, but I need an OpenAI API key to be configured. Your question: "${message}"`;
    }

    const systemPrompt = `You are a helpful coding assistant. Help with code analysis, debugging, and improvements.
    ${context ? `Context: ${context}` : ''}
    ${code ? `\nCurrent code:\n${code}` : ''}`;

    const response = await openai.chat.completions.create({
      model: config.model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ],
      max_tokens: config.maxTokens,
      temperature: config.temperature
    });

    return response.choices[0]?.message?.content || 'Sorry, I could not generate a response.';
  } catch (error) {
    console.error('AI Chat Error:', error);
    return 'ü§ñ Sorry, the AI chat service is currently unavailable.';
  }
}
EOF

# 5. –û–ë–ù–û–í–õ–Ø–ï–ú PACKAGE.JSON (—É–±–∏—Ä–∞–µ–º rate-limiter-flexible)
cat > backend/package.json << 'EOF'
{
  "name": "icoder-plus-backend",
  "version": "2.0.0",
  "description": "iCoder Plus Backend - AI-powered code analysis API",
  "main": "dist/server.js",
  "scripts": {
    "dev": "nodemon --watch src --ext ts --exec ts-node -r tsconfig-paths/register src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js",
    "lint": "eslint src --ext .ts",
    "lint:fix": "eslint src --ext .ts --fix",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.9.1",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "diff": "^5.1.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "helmet": "^7.0.0",
    "joi": "^17.10.0",
    "morgan": "^1.10.0",
    "openai": "^4.20.1",
    "winston": "^3.10.0"
  },
  "devDependencies": {
    "@types/compression": "^1.7.3",
    "@types/cors": "^2.8.14",
    "@types/express": "^4.17.17",
    "@types/morgan": "^1.9.5",
    "@types/node": "^20.5.9",
    "@typescript-eslint/eslint-plugin": "^6.5.0",
    "@typescript-eslint/parser": "^6.5.0",
    "nodemon": "^3.0.1",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.2.2"
  },
  "keywords": [
    "express",
    "typescript",
    "ai",
    "openai",
    "claude",
    "code-analysis",
    "diff",
    "api"
  ],
  "author": "Solar IT Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
EOF

# 6. –û–ë–ù–û–í–õ–Ø–ï–ú TSCONFIG.JSON (—É–±–∏—Ä–∞–µ–º "type": "module")
cat > backend/tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "CommonJS",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": false,
    "declaration": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "baseUrl": "./src",
    "paths": {
      "@types/*": ["types/*"],
      "@services/*": ["services/*"],
      "@routes/*": ["routes/*"],
      "@middleware/*": ["middleware/*"],
      "@utils/*": ["utils/*"]
    }
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ],
  "ts-node": {
    "require": ["tsconfig-paths/register"]
  }
}
EOF

cd backend

# 7. –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
echo "üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–±–µ–∑ rate-limiter-flexible)..."
rm -rf node_modules package-lock.json
npm install

# 8. –ü–†–û–í–ï–†–Ø–ï–ú –°–ë–û–†–ö–£
echo "üî® –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!"
    
    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º dev server..."
    echo "–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:3000/health"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    timeout 10s npm run dev || true
    
    echo ""
    echo "‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
    echo "üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:"
    echo "   npm run dev   # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
    echo "   npm run build # –°–±–æ—Ä–∫–∞"  
    echo "   npm start     # –ü—Ä–æ–¥–∞–∫—à–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ."
fi